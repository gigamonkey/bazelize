#!/bin/bash

# 1. Write a libdeps.txt contain a bunch of sbt-like strings, e.g.
#
#   "com.typesafe.play" %% "play" % "2.6.0"
#
# Describing the third party libraries needed.
#
# 2. Write transitivity file containing either 'runtime_deps' or
# 'exports' (without quotes).
#
# 3. Run this script to generate a WORKSPACE file and BUILD files
# wherever there are .scala files as well as a some other necessary
# BUILD files in tools and third_party
#
# 4. Modify BUILD files generated by this script to add dependencies
# on appropriate targets in third_party/.

#
# Some URLs:
#
# https://github.com/bazelbuild/rules_scala
# https://github.com/johnynek/bazel-deps
# https://github.com/avibryant/bazel-scala-example
#


# Bazel style guide suggests third_party as the name of the directory.
# However Bazel then gets super pedantic about checking license info.
# The bazel-deps tool defaults to 3rdparty (as cargo culted from
# Twitter).
THIRD_PARTY=3rdparty

GEN_MAVEN_DEPS=../bazel-deps/gen_maven_deps.sh

here=`dirname $0`

if [ ! -e "libdeps.txt" ]; then
    echo "Need a libdeps.txt to generate dependencies.yaml" >&2
    exit 1
fi

if [ ! -e $GEN_MAVEN_DEPS ]; then
    echo "$GEN_MAVEN_DEPS does not exist." >&2
    exit 1
fi

if [ ! -x $GEN_MAVEN_DEPS ]; then
    echo "$GEN_MAVEN_DEPS not executable." >&2
    exit 1
fi

if [ ! -e "transitivity" ]; then
    echo "Need transitivity file." >&2
    exit 1
fi

if [ "$(cat transitivity)" != 'runtime_deps' ] && [ "$(cat transitivity)" != 'exports' ]; then
    echo "transitivity  must be either 'runtime_deps' or 'exports'. Found '$(cat transitivity)'." >&2
    exit 1
fi


function ensure_file {
    d=`dirname "$1"`
    if [ ! -e "$1" ]; then
        mkdir -p "$d"
        touch "$1"
    fi
}

function write_workspace {
    local pwd=`pwd`
    local name=`basename $pwd | tr '-' '_'`
    local file=WORKSPACE
    if [ ! -e $file ]; then
        cat << EOF > $file
workspace(name = "$name")

git_repository(
    name = "io_bazel_rules_scala",
    remote = "git://github.com/bazelbuild/rules_scala",
    commit = "031e73c02e0d8bfcd06c6e4086cdfc7f3a3061a8"
)

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_repositories")
scala_repositories()

load("//$THIRD_PARTY:workspace.bzl", "maven_dependencies")
load("//$THIRD_PARTY:load.bzl", "declare_maven")

maven_dependencies(declare_maven)
EOF
    fi
}

function write_buildfile {
    local file=BUILD
    if [ ! -e $file ]; then
        cat << EOF > $file
scala_library(
    name = "$1",
    srcs = glob(["*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
    ]
)
EOF
    fi
}

#transitivity: runtime_deps | exports

function write_dependencies {
    local file=dependencies.yaml
    transitivity=$(cat transitivity)
    if [ ! -e $file ]; then
        cat <<EOF > $file

options:
  thirdPartyDirectory: "$THIRD_PARTY/jvm"
  languages: [ "java", "scala:2.11.8" ]
  buildHeader:
    - load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library")
  resolvers:
    - id: "mavencentral"
      type: "default"
      url: https://repo.maven.apache.org/maven2/
  transitivity: $transitivity
  versionConflictPolicy: highest

dependencies:
EOF
        $here/deps libdeps.txt >> dependencies.yaml
    fi
}

function write_prelude_bazel {
    local file=tools/build_rules/prelude_bazel
    if [ ! -e $file ]; then
        cat << EOF > $file
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library", "scala_macro_library","scala_binary", "scala_test")
EOF
    fi
}

function write_load_bzl {
    local file=$THIRD_PARTY/load.bzl
    if [ ! -e $file ]; then
        cat <<EOF > $file
def declare_maven(item):
  sha = item.get("sha1")
  if sha != None:
    native.maven_jar(name = item["name"], artifact = item["artifact"], sha1 = sha)
  else:
    native.maven_jar(name = item["name"], artifact = item["artifact"])
  native.bind(name = item["bind"], actual = item["actual"])
EOF
    fi
}

function write_bazelrc {
    local file=.bazelrc
    if [ ! -e $file ]; then
        cat <<EOF > $file
build --strategy=Scalac=worker
test --strategy=Scalac=worker
EOF
    fi
}

function write_buildfiles {
    find . -name '.git' -prune -o \( -name '*.scala' -o -name '*.proto' \) -exec dirname {} \; | sort | uniq | \
        while read -r dir; do
            (cd $dir; write_buildfile `basename $dir`);
        done
}

function gen_maven_deps {
    $GEN_MAVEN_DEPS generate -r `pwd` -s $THIRD_PARTY/workspace.bzl -d dependencies.yaml
}

function ammend_gitignore {
    if [ -e .gitignore ] && [ -z "`grep 'bazel-*' .gitignore`" ]; then
        echo "" >> .gitignore;
        echo "# Bazel" >> .gitignore;
        echo "bazel-*" >> .gitignore;
    fi
}


ensure_file $THIRD_PARTY/BUILD
ensure_file tools/build_rules/BUILD

write_prelude_bazel
write_workspace
write_dependencies
write_load_bzl
write_bazelrc
write_buildfiles
gen_maven_deps
ammend_gitignore
