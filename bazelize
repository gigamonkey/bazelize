#!/bin/bash

# 1. Run this script to generate a WORKSPACE file and BUILD files
# wherever there are .scala files as well as a some other necessary
# BUILD files in tools and 3rdparty
#
# 2. Use Oscar's tool to build a nest of 3rdparty BUILD files for all
# the transitive dependencies of any top-level dependencies listed in
# dependencies.yaml.

# ../bazel-deps/gen_maven_deps.sh generate -r `pwd` -s 3rdparty/workspace.bzl -d dependencies.yaml
#
# 3. Modify BUILD files generated by this script to add dependencies
# on appropriate targets in 3rdparty/.

#
# Some URLs:
#
# https://github.com/bazelbuild/rules_scala
# https://github.com/johnynek/bazel-deps
# https://github.com/avibryant/bazel-scala-example
#

here=`dirname $0`

if [ ! -e "libdeps.txt" ]; then
    echo "Need a libdeps.txt to generate dependencies.yaml" >&2
    exit 1
fi

function ensure_file {
    d=`dirname "$1"`
    if [ ! -e "$1" ]; then
        mkdir -p "$d"
        touch "$1"
    fi
}

function write_workspace {
    pwd=`pwd`
    name=`basename $pwd | tr '-' '_'`
    cat << EOF > WORKSPACE
workspace(name = "$name")

git_repository(
    name = "io_bazel_rules_scala",
    remote = "git://github.com/bazelbuild/rules_scala",
    commit = "031e73c02e0d8bfcd06c6e4086cdfc7f3a3061a8"
)

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_repositories")
scala_repositories()

load("//3rdparty:workspace.bzl", "maven_dependencies")
load("//3rdparty:load.bzl", "declare_maven")

maven_dependencies(declare_maven)
EOF
}

function write_buildfile {
    cat << EOF > BUILD
scala_library(
    name = "$1",
    srcs = glob(["*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
    ]
)
EOF
}

function write_dependencies {
    cat <<EOF > dependencies.yaml
options:
  languages: [ "java", "scala:2.11.8" ]
  buildHeader:
    - load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library")
  resolvers:
    - id: "mavencentral"
      type: "default"
      url: https://repo.maven.apache.org/maven2/
  transitivity: runtime_deps
  versionConflictPolicy: highest

dependencies:
  com.typesafe.play:
    play:
      lang: scala
      version: "2.6.0"

EOF
    $here/deps libdeps.txt >> dependencies.yaml
}

function write_prelude_bazel {
    cat << EOF > tools/build_rules/prelude_bazel
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library", "scala_macro_library","scala_binary", "scala_test")
EOF
}

function write_load_bzl {
    cat <<EOF > 3rdparty/load.bzl
def declare_maven(item):
  sha = item.get("sha1")
  if sha != None:
    native.maven_jar(name = item["name"], artifact = item["artifact"], sha1 = sha)
  else:
    native.maven_jar(name = item["name"], artifact = item["artifact"])
  native.bind(name = item["bind"], actual = item["actual"])
EOF
}

ensure_file 3rdparty/BUILD
ensure_file tools/build_rules/BUILD

write_prelude_bazel
write_workspace
write_dependencies
write_load_bzl

find . -name '.git' -prune -o -name '*.scala' -exec dirname {} \; | sort | uniq | \
    while read -r dir; do
        (cd $dir; write_buildfile `basename $dir`);
    done

$here/../bazel-deps/gen_maven_deps.sh generate -r `pwd` -s 3rdparty/workspace.bzl -d dependencies.yaml
